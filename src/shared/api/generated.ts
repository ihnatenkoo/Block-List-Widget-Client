/**
 * Generated by orval v6.30.2 üç∫
 * Do not edit manually.
 * Block list
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse } from 'axios';
export type BlockListControllerGetListParams = {
  q?: string;
};

export type AddBlockItemDtoType =
  (typeof AddBlockItemDtoType)[keyof typeof AddBlockItemDtoType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddBlockItemDtoType = {
  Keyword: 'Keyword',
  Website: 'Website',
} as const;

export interface AddBlockItemDto {
  data: string;
  type: AddBlockItemDtoType;
}

export type BlockItemDtoType =
  (typeof BlockItemDtoType)[keyof typeof BlockItemDtoType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BlockItemDtoType = {
  Keyword: 'Keyword',
  Website: 'Website',
} as const;

export interface BlockItemDto {
  blockListId: number;
  createdAt: string;
  data: string;
  id: number;
  type: BlockItemDtoType;
}

export interface BlockListDto {
  id: number;
  items: BlockItemDto[];
  ownerId: number;
}

export interface UpdateAccountDto {
  isBlockingEnabled?: boolean;
}

export interface AccountDto {
  id: number;
  isBlockingEnabled: boolean;
  ownerId: number;
}

export interface GetSessionInfoDto {
  email: string;
  exp: number;
  iat: number;
  id: number;
}

export interface SignInBodyDto {
  email: string;
  password: string;
}

export interface SignUpBodyDto {
  email: string;
  password: string;
}

export const appControllerGetServerStatus = <TData = AxiosResponse<void>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/`, options);
};

export const authControllerSignUp = <TData = AxiosResponse<void>>(
  signUpBodyDto: SignUpBodyDto,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(`/auth/sign-up`, signUpBodyDto, options);
};

export const authControllerSignIn = <TData = AxiosResponse<void>>(
  signInBodyDto: SignInBodyDto,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(`/auth/sign-in`, signInBodyDto, options);
};

export const authControllerSignOut = <TData = AxiosResponse<void>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(`/auth/sign-out`, undefined, options);
};

export const authControllerGetSessionInfo = <
  TData = AxiosResponse<GetSessionInfoDto>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/auth/session`, options);
};

export const accountControllerGetAccount = <TData = AxiosResponse<AccountDto>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/account`, options);
};

export const accountControllerUpdateAccount = <
  TData = AxiosResponse<AccountDto>
>(
  updateAccountDto: UpdateAccountDto,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.patch(`/account`, updateAccountDto, options);
};

export const blockListControllerGetList = <TData = AxiosResponse<BlockListDto>>(
  params?: BlockListControllerGetListParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/block-list`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const blockListControllerAddBlockListItem = <
  TData = AxiosResponse<BlockItemDto>
>(
  addBlockItemDto: AddBlockItemDto,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(`/block-list/item`, addBlockItemDto, options);
};

export const blockListControllerRemoveBlockItem = <
  TData = AxiosResponse<BlockItemDto>
>(
  id: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(`/block-list/item/${id}`, options);
};

export type AppControllerGetServerStatusResult = AxiosResponse<void>;
export type AuthControllerSignUpResult = AxiosResponse<void>;
export type AuthControllerSignInResult = AxiosResponse<void>;
export type AuthControllerSignOutResult = AxiosResponse<void>;
export type AuthControllerGetSessionInfoResult =
  AxiosResponse<GetSessionInfoDto>;
export type AccountControllerGetAccountResult = AxiosResponse<AccountDto>;
export type AccountControllerUpdateAccountResult = AxiosResponse<AccountDto>;
export type BlockListControllerGetListResult = AxiosResponse<BlockListDto>;
export type BlockListControllerAddBlockListItemResult =
  AxiosResponse<BlockItemDto>;
export type BlockListControllerRemoveBlockItemResult =
  AxiosResponse<BlockItemDto>;
